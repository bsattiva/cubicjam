{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _utils = require(\"./utils\");\n\nvar utils = _interopRequireWildcard(_utils);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\r\n * Simple module to localize the React interface using the same syntax\r\n * used in the ReactNativeLocalization module\r\n * (https://github.com/stefalda/ReactNativeLocalization)\r\n *\r\n * Originally developed by Stefano Falda (stefano.falda@gmail.com)\r\n *\r\n * It uses a call to the Navigator/Browser object to get the current interface language,\r\n * then display the correct language strings or the default language (the first\r\n * one if a match is not found).\r\n *\r\n * How to use:\r\n * Check the instructions at:\r\n * https://github.com/stefalda/localized-strings\r\n */\n\n\nvar placeholderReplaceRegex = /(\\{[\\d|\\w]+\\})/;\nvar placeholderReferenceRegex = /(\\$ref\\{[\\w|.]+\\})/;\n\nvar LocalizedStrings = function () {\n  /**\r\n   * Constructor used to provide the strings objects in various language and the optional callback to get\r\n   * the interface language\r\n   * @param {*} props - the strings object\r\n   * @param {Function} options.customLanguageInterface - the optional method to use to get the InterfaceLanguage\r\n   * @param {Boolean} options.pseudo - convert all strings to pseudo, helpful when implementing\r\n   * @param {Boolean} options.pseudoMultipleLanguages - add 40% to pseudo, helps with translations in the future\r\n   * @param {Boolean} options.logsEnabled - Enable/Disable console.log outputs (default=true)\r\n   */\n  function LocalizedStrings(props, options) {\n    _classCallCheck(this, LocalizedStrings); // Compatibility fix with previous version\n\n\n    if (typeof options === \"function\") {\n      /* eslint-disable no-param-reassign */\n      options = {\n        customLanguageInterface: options\n      };\n      /* eslint-enable */\n    }\n\n    this._opts = _extends({}, {\n      customLanguageInterface: utils.getInterfaceLanguage,\n      pseudo: false,\n      pseudoMultipleLanguages: false,\n      logsEnabled: true\n    }, options);\n    this._interfaceLanguage = this._opts.customLanguageInterface();\n    this._language = this._interfaceLanguage;\n    this.setContent(props);\n  }\n  /**\r\n   * Set the strings objects based on the parameter passed in the constructor\r\n   * @param {*} props\r\n   */\n\n\n  _createClass(LocalizedStrings, [{\n    key: \"setContent\",\n    value: function setContent(props) {\n      var _this = this;\n\n      var _Object$keys = Object.keys(props),\n          _Object$keys2 = _slicedToArray(_Object$keys, 1),\n          defaultLang = _Object$keys2[0];\n\n      this._defaultLanguage = defaultLang;\n      this._defaultLanguageFirstLevelKeys = []; // Store locally the passed strings\n\n      this._props = props;\n      utils.validateTranslationKeys(Object.keys(props[this._defaultLanguage])); // Store first level keys (for identifying missing translations)\n\n      Object.keys(this._props[this._defaultLanguage]).forEach(function (key) {\n        if (typeof _this._props[_this._defaultLanguage][key] === \"string\") {\n          _this._defaultLanguageFirstLevelKeys.push(key);\n        }\n      }); // Set language to its default value (the interface)\n\n      this.setLanguage(this._interfaceLanguage); // Developermode with pseudo\n\n      if (this._opts.pseudo) {\n        this._pseudoAllValues(this._props);\n      }\n    }\n    /**\r\n     * Replace all strings to pseudo value\r\n     * @param {Object} obj - Loopable object\r\n     */\n\n  }, {\n    key: \"_pseudoAllValues\",\n    value: function _pseudoAllValues(obj) {\n      var _this2 = this;\n\n      Object.keys(obj).forEach(function (property) {\n        if (_typeof(obj[property]) === \"object\") {\n          _this2._pseudoAllValues(obj[property]);\n        } else if (typeof obj[property] === \"string\") {\n          if (obj[property].indexOf(\"[\") === 0 && obj[property].lastIndexOf(\"]\") === obj[property].length - 1) {\n            // already psuedo fixed\n            return;\n          } // @TODO must be a way to get regex to find all replaceble strings except our replacement variables\n\n\n          var strArr = obj[property].split(\" \");\n\n          for (var i = 0; i < strArr.length; i += 1) {\n            if (strArr[i].match(placeholderReplaceRegex)) {// we want to keep this string, includes specials\n            } else if (strArr[i].match(placeholderReferenceRegex)) {// we want to keep this string, includes specials\n            } else {\n              var len = strArr[i].length;\n\n              if (_this2._opts.pseudoMultipleLanguages) {\n                len = parseInt(len * 1.4, 10); // add length with 40%\n              }\n\n              strArr[i] = utils.randomPseudo(len);\n            }\n          }\n\n          obj[property] = \"[\" + strArr.join(\" \") + \"]\"; // eslint-disable-line no-param-reassign\n        }\n      });\n    }\n    /**\r\n     * Can be used from ouside the class to force a particular language\r\n     * indipendently from the interface one\r\n     * @param {*} language\r\n     */\n\n  }, {\n    key: \"setLanguage\",\n    value: function setLanguage(language) {\n      var _this3 = this; // Check if exists a translation for the current language or if the default\n      // should be used\n\n\n      var bestLanguage = utils.getBestMatchingLanguage(language, this._props);\n      var defaultLanguage = Object.keys(this._props)[0];\n      this._language = bestLanguage; // Associate the language object to the this object\n\n      if (this._props[bestLanguage]) {\n        // delete default propery values to identify missing translations\n        for (var i = 0; i < this._defaultLanguageFirstLevelKeys.length; i += 1) {\n          delete this[this._defaultLanguageFirstLevelKeys[i]];\n        }\n\n        var localizedStrings = _extends({}, this._props[this._language]);\n\n        Object.keys(localizedStrings).forEach(function (key) {\n          _this3[key] = localizedStrings[key];\n        }); // Now add any string missing from the translation but existing in the default language\n\n        if (defaultLanguage !== this._language) {\n          localizedStrings = this._props[defaultLanguage];\n\n          this._fallbackValues(localizedStrings, this);\n        }\n      }\n    }\n    /**\r\n     * Load fallback values for missing translations\r\n     * @param {*} defaultStrings\r\n     * @param {*} strings\r\n     */\n\n  }, {\n    key: \"_fallbackValues\",\n    value: function _fallbackValues(defaultStrings, strings) {\n      var _this4 = this;\n\n      Object.keys(defaultStrings).forEach(function (key) {\n        if (Object.prototype.hasOwnProperty.call(defaultStrings, key) && !strings[key] && strings[key] !== \"\") {\n          strings[key] = defaultStrings[key]; // eslint-disable-line no-param-reassign\n\n          if (_this4._opts.logsEnabled) {\n            console.log(\"\\uD83D\\uDEA7 \\uD83D\\uDC77 key '\" + key + \"' not found in localizedStrings for language \" + _this4._language + \" \\uD83D\\uDEA7\");\n          }\n        } else if (typeof strings[key] !== \"string\") {\n          // It's an object\n          _this4._fallbackValues(defaultStrings[key], strings[key]);\n        }\n      });\n    }\n    /**\r\n     * The current language displayed (could differ from the interface language\r\n     * if it has been forced manually and a matching translation has been found)\r\n     */\n\n  }, {\n    key: \"getLanguage\",\n    value: function getLanguage() {\n      return this._language;\n    }\n    /**\r\n     * The current interface language (could differ from the language displayed)\r\n     */\n\n  }, {\n    key: \"getInterfaceLanguage\",\n    value: function getInterfaceLanguage() {\n      return this._interfaceLanguage;\n    }\n    /**\r\n     * Return an array containing the available languages passed as props in the constructor\r\n     */\n\n  }, {\n    key: \"getAvailableLanguages\",\n    value: function getAvailableLanguages() {\n      var _this5 = this;\n\n      if (!this._availableLanguages) {\n        this._availableLanguages = [];\n        Object.keys(this._props).forEach(function (key) {\n          _this5._availableLanguages.push(key);\n        });\n      }\n\n      return this._availableLanguages;\n    } // Format the passed string replacing the numbered or tokenized placeholders\n    // eg. 1: I'd like some {0} and {1}, or just {0}\n    // eg. 2: I'd like some {bread} and {butter}, or just {bread}\n    // eg. 3: I'd like some $ref{bread} and $ref{butter}, or just $ref{bread}\n    // Use example:\n    // eg. 1: strings.formatString(strings.question, strings.bread, strings.butter)\n    // eg. 2: strings.formatString(strings.question, { bread: strings.bread, butter: strings.butter })\n    // eg. 3: strings.formatString(strings.question)\n\n  }, {\n    key: \"formatString\",\n    value: function formatString(str) {\n      var _this6 = this;\n\n      for (var _len = arguments.length, valuesForPlaceholders = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        valuesForPlaceholders[_key - 1] = arguments[_key];\n      }\n\n      var input = str || \"\";\n\n      if (typeof input === \"string\") {\n        input = this.getString(str, null, true) || input;\n      }\n\n      var ref = input.split(placeholderReferenceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReferenceRegex)) {\n          var matchedKey = textPart.slice(5, -1);\n\n          var referenceValue = _this6.getString(matchedKey);\n\n          if (referenceValue) return referenceValue;\n\n          if (_this6._opts.logsEnabled) {\n            console.log(\"No Localization ref found for '\" + textPart + \"' in string '\" + str + \"'\");\n          } // lets print it another way so next replacer doesn't find it\n\n\n          return \"$ref(id:\" + matchedKey + \")\";\n        }\n\n        return textPart;\n      }).join(\"\");\n      return ref.split(placeholderReplaceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReplaceRegex)) {\n          var matchedKey = textPart.slice(1, -1);\n          var valueForPlaceholder = valuesForPlaceholders[matchedKey]; // If no value found, check if working with an object instead\n\n          if (valueForPlaceholder === undefined) {\n            var valueFromObjectPlaceholder = valuesForPlaceholders[0][matchedKey];\n\n            if (valueFromObjectPlaceholder !== undefined) {\n              valueForPlaceholder = valueFromObjectPlaceholder;\n            } else {\n              // If value still isn't found, then it must have been undefined/null\n              return valueForPlaceholder;\n            }\n          }\n\n          return valueForPlaceholder;\n        }\n\n        return textPart;\n      }).join(\"\");\n    } // Return a string with the passed key in a different language or defalt if not set\n    // We allow deep . notation for finding strings\n\n  }, {\n    key: \"getString\",\n    value: function getString(key, language) {\n      var omitWarning = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      try {\n        var current = this._props[language || this._language];\n        var paths = key.split(\".\");\n\n        for (var i = 0; i < paths.length; i += 1) {\n          if (current[paths[i]] === undefined) {\n            throw Error(paths[i]);\n          }\n\n          current = current[paths[i]];\n        }\n\n        return current;\n      } catch (ex) {\n        if (!omitWarning && this._opts.logsEnabled) {\n          console.log(\"No localization found for key '\" + key + \"' and language '\" + language + \"', failed on \" + ex.message);\n        }\n      }\n\n      return null;\n    }\n    /**\r\n     * The current props (locale object)\r\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return this._props;\n    }\n  }]);\n\n  return LocalizedStrings;\n}();\n\nexports.default = LocalizedStrings;","map":{"version":3,"sources":["C:/Users/Maxim.Karpov/cypress/react/cubicjam/cubicjam/node_modules/localized-strings/lib/LocalizedStrings.js"],"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","length","err","Array","isArray","TypeError","_extends","assign","target","arguments","source","key","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_utils","require","utils","_interopRequireWildcard","__esModule","newObj","default","_classCallCheck","instance","placeholderReplaceRegex","placeholderReferenceRegex","LocalizedStrings","options","customLanguageInterface","_opts","getInterfaceLanguage","pseudo","pseudoMultipleLanguages","logsEnabled","_interfaceLanguage","_language","setContent","_this","_Object$keys","keys","_Object$keys2","defaultLang","_defaultLanguage","_defaultLanguageFirstLevelKeys","_props","validateTranslationKeys","forEach","setLanguage","_pseudoAllValues","_this2","property","indexOf","lastIndexOf","strArr","split","match","len","parseInt","randomPseudo","join","language","_this3","bestLanguage","getBestMatchingLanguage","defaultLanguage","localizedStrings","_fallbackValues","defaultStrings","strings","_this4","console","log","getLanguage","getAvailableLanguages","_this5","_availableLanguages","formatString","str","_this6","_len","valuesForPlaceholders","_key","input","getString","ref","filter","textPart","map","matchedKey","slice","referenceValue","valueForPlaceholder","valueFromObjectPlaceholder","omitWarning","current","paths","Error","ex","message","getContent"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,OAAO,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA3D,GAAsE,UAAUC,GAAV,EAAe;AAAE,SAAO,OAAOA,GAAd;AAAoB,CAA3G,GAA8G,UAAUA,GAAV,EAAe;AAAE,SAAOA,GAAG,IAAI,OAAOF,MAAP,KAAkB,UAAzB,IAAuCE,GAAG,CAACC,WAAJ,KAAoBH,MAA3D,IAAqEE,GAAG,KAAKF,MAAM,CAACI,SAApF,GAAgG,QAAhG,GAA2G,OAAOF,GAAzH;AAA+H,CAA5Q;;AAEA,IAAIG,cAAc,GAAG,YAAY;AAAE,WAASC,aAAT,CAAuBC,GAAvB,EAA4BC,CAA5B,EAA+B;AAAE,QAAIC,IAAI,GAAG,EAAX;AAAe,QAAIC,EAAE,GAAG,IAAT;AAAe,QAAIC,EAAE,GAAG,KAAT;AAAgB,QAAIC,EAAE,GAAGC,SAAT;;AAAoB,QAAI;AAAE,WAAK,IAAIC,EAAE,GAAGP,GAAG,CAACP,MAAM,CAACC,QAAR,CAAH,EAAT,EAAiCc,EAAtC,EAA0C,EAAEL,EAAE,GAAG,CAACK,EAAE,GAAGD,EAAE,CAACE,IAAH,EAAN,EAAiBC,IAAxB,CAA1C,EAAyEP,EAAE,GAAG,IAA9E,EAAoF;AAAED,QAAAA,IAAI,CAACS,IAAL,CAAUH,EAAE,CAACjB,KAAb;;AAAqB,YAAIU,CAAC,IAAIC,IAAI,CAACU,MAAL,KAAgBX,CAAzB,EAA4B;AAAQ;AAAE,KAAvJ,CAAwJ,OAAOY,GAAP,EAAY;AAAET,MAAAA,EAAE,GAAG,IAAL;AAAWC,MAAAA,EAAE,GAAGQ,GAAL;AAAW,KAA5L,SAAqM;AAAE,UAAI;AAAE,YAAI,CAACV,EAAD,IAAOI,EAAE,CAAC,QAAD,CAAb,EAAyBA,EAAE,CAAC,QAAD,CAAF;AAAiB,OAAhD,SAAyD;AAAE,YAAIH,EAAJ,EAAQ,MAAMC,EAAN;AAAW;AAAE;;AAAC,WAAOH,IAAP;AAAc;;AAAC,SAAO,UAAUF,GAAV,EAAeC,CAAf,EAAkB;AAAE,QAAIa,KAAK,CAACC,OAAN,CAAcf,GAAd,CAAJ,EAAwB;AAAE,aAAOA,GAAP;AAAa,KAAvC,MAA6C,IAAIP,MAAM,CAACC,QAAP,IAAmBN,MAAM,CAACY,GAAD,CAA7B,EAAoC;AAAE,aAAOD,aAAa,CAACC,GAAD,EAAMC,CAAN,CAApB;AAA+B,KAArE,MAA2E;AAAE,YAAM,IAAIe,SAAJ,CAAc,sDAAd,CAAN;AAA8E;AAAE,GAArO;AAAwO,CAAhoB,EAArB;;AAEA,IAAIC,QAAQ,GAAG7B,MAAM,CAAC8B,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,SAAS,CAACR,MAA9B,EAAsCX,CAAC,EAAvC,EAA2C;AAAE,QAAIoB,MAAM,GAAGD,SAAS,CAACnB,CAAD,CAAtB;;AAA2B,SAAK,IAAIqB,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIjC,MAAM,CAACS,SAAP,CAAiB0B,cAAjB,CAAgCC,IAAhC,CAAqCH,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEH,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOH,MAAP;AAAgB,CAAhQ;;AAEA,IAAIM,YAAY,GAAG,YAAY;AAAE,WAASC,gBAAT,CAA0BP,MAA1B,EAAkCQ,KAAlC,EAAyC;AAAE,SAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0B,KAAK,CAACf,MAA1B,EAAkCX,CAAC,EAAnC,EAAuC;AAAE,UAAI2B,UAAU,GAAGD,KAAK,CAAC1B,CAAD,CAAtB;AAA2B2B,MAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,MAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,UAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4B3C,MAAAA,MAAM,CAACC,cAAP,CAAsB8B,MAAtB,EAA8BS,UAAU,CAACN,GAAzC,EAA8CM,UAA9C;AAA4D;AAAE;;AAAC,SAAO,UAAUI,WAAV,EAAuBC,UAAvB,EAAmCC,WAAnC,EAAgD;AAAE,QAAID,UAAJ,EAAgBP,gBAAgB,CAACM,WAAW,CAACnC,SAAb,EAAwBoC,UAAxB,CAAhB;AAAqD,QAAIC,WAAJ,EAAiBR,gBAAgB,CAACM,WAAD,EAAcE,WAAd,CAAhB;AAA4C,WAAOF,WAAP;AAAqB,GAAhN;AAAmN,CAA9hB,EAAnB;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIC,KAAK,GAAGC,uBAAuB,CAACH,MAAD,CAAnC;;AAEA,SAASG,uBAAT,CAAiC3C,GAAjC,EAAsC;AAAE,MAAIA,GAAG,IAAIA,GAAG,CAAC4C,UAAf,EAA2B;AAAE,WAAO5C,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAI6C,MAAM,GAAG,EAAb;;AAAiB,QAAI7C,GAAG,IAAI,IAAX,EAAiB;AAAE,WAAK,IAAI2B,GAAT,IAAgB3B,GAAhB,EAAqB;AAAE,YAAIP,MAAM,CAACS,SAAP,CAAiB0B,cAAjB,CAAgCC,IAAhC,CAAqC7B,GAArC,EAA0C2B,GAA1C,CAAJ,EAAoDkB,MAAM,CAAClB,GAAD,CAAN,GAAc3B,GAAG,CAAC2B,GAAD,CAAjB;AAAyB;AAAE;;AAACkB,IAAAA,MAAM,CAACC,OAAP,GAAiB9C,GAAjB;AAAsB,WAAO6C,MAAP;AAAgB;AAAE;;AAE7Q,SAASE,eAAT,CAAyBC,QAAzB,EAAmCX,WAAnC,EAAgD;AAAE,MAAI,EAAEW,QAAQ,YAAYX,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIhB,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;AAEzJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAI4B,uBAAuB,GAAG,gBAA9B;AACA,IAAIC,yBAAyB,GAAG,oBAAhC;;AAEA,IAAIC,gBAAgB,GAAG,YAAY;AACjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,WAASA,gBAAT,CAA0BnB,KAA1B,EAAiCoB,OAAjC,EAA0C;AACxCL,IAAAA,eAAe,CAAC,IAAD,EAAOI,gBAAP,CAAf,CADwC,CAGxC;;;AACA,QAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC;AACjC;AACAA,MAAAA,OAAO,GAAG;AAAEC,QAAAA,uBAAuB,EAAED;AAA3B,OAAV;AACA;AACD;;AACD,SAAKE,KAAL,GAAahC,QAAQ,CAAC,EAAD,EAAK;AACxB+B,MAAAA,uBAAuB,EAAEX,KAAK,CAACa,oBADP;AAExBC,MAAAA,MAAM,EAAE,KAFgB;AAGxBC,MAAAA,uBAAuB,EAAE,KAHD;AAIxBC,MAAAA,WAAW,EAAE;AAJW,KAAL,EAKlBN,OALkB,CAArB;AAMA,SAAKO,kBAAL,GAA0B,KAAKL,KAAL,CAAWD,uBAAX,EAA1B;AACA,SAAKO,SAAL,GAAiB,KAAKD,kBAAtB;AACA,SAAKE,UAAL,CAAgB7B,KAAhB;AACD;AAED;AACF;AACA;AACA;;;AAGEF,EAAAA,YAAY,CAACqB,gBAAD,EAAmB,CAAC;AAC9BxB,IAAAA,GAAG,EAAE,YADyB;AAE9B/B,IAAAA,KAAK,EAAE,SAASiE,UAAT,CAAoB7B,KAApB,EAA2B;AAChC,UAAI8B,KAAK,GAAG,IAAZ;;AAEA,UAAIC,YAAY,GAAGtE,MAAM,CAACuE,IAAP,CAAYhC,KAAZ,CAAnB;AAAA,UACIiC,aAAa,GAAG9D,cAAc,CAAC4D,YAAD,EAAe,CAAf,CADlC;AAAA,UAEIG,WAAW,GAAGD,aAAa,CAAC,CAAD,CAF/B;;AAIA,WAAKE,gBAAL,GAAwBD,WAAxB;AACA,WAAKE,8BAAL,GAAsC,EAAtC,CARgC,CAShC;;AACA,WAAKC,MAAL,GAAcrC,KAAd;AACAU,MAAAA,KAAK,CAAC4B,uBAAN,CAA8B7E,MAAM,CAACuE,IAAP,CAAYhC,KAAK,CAAC,KAAKmC,gBAAN,CAAjB,CAA9B,EAXgC,CAYhC;;AACA1E,MAAAA,MAAM,CAACuE,IAAP,CAAY,KAAKK,MAAL,CAAY,KAAKF,gBAAjB,CAAZ,EAAgDI,OAAhD,CAAwD,UAAU5C,GAAV,EAAe;AACrE,YAAI,OAAOmC,KAAK,CAACO,MAAN,CAAaP,KAAK,CAACK,gBAAnB,EAAqCxC,GAArC,CAAP,KAAqD,QAAzD,EAAmE;AACjEmC,UAAAA,KAAK,CAACM,8BAAN,CAAqCpD,IAArC,CAA0CW,GAA1C;AACD;AACF,OAJD,EAbgC,CAkBhC;;AACA,WAAK6C,WAAL,CAAiB,KAAKb,kBAAtB,EAnBgC,CAoBhC;;AACA,UAAI,KAAKL,KAAL,CAAWE,MAAf,EAAuB;AACrB,aAAKiB,gBAAL,CAAsB,KAAKJ,MAA3B;AACD;AACF;AAED;AACJ;AACA;AACA;;AA/BkC,GAAD,EAiC5B;AACD1C,IAAAA,GAAG,EAAE,kBADJ;AAED/B,IAAAA,KAAK,EAAE,SAAS6E,gBAAT,CAA0BzE,GAA1B,EAA+B;AACpC,UAAI0E,MAAM,GAAG,IAAb;;AAEAjF,MAAAA,MAAM,CAACuE,IAAP,CAAYhE,GAAZ,EAAiBuE,OAAjB,CAAyB,UAAUI,QAAV,EAAoB;AAC3C,YAAI9E,OAAO,CAACG,GAAG,CAAC2E,QAAD,CAAJ,CAAP,KAA2B,QAA/B,EAAyC;AACvCD,UAAAA,MAAM,CAACD,gBAAP,CAAwBzE,GAAG,CAAC2E,QAAD,CAA3B;AACD,SAFD,MAEO,IAAI,OAAO3E,GAAG,CAAC2E,QAAD,CAAV,KAAyB,QAA7B,EAAuC;AAC5C,cAAI3E,GAAG,CAAC2E,QAAD,CAAH,CAAcC,OAAd,CAAsB,GAAtB,MAA+B,CAA/B,IAAoC5E,GAAG,CAAC2E,QAAD,CAAH,CAAcE,WAAd,CAA0B,GAA1B,MAAmC7E,GAAG,CAAC2E,QAAD,CAAH,CAAc1D,MAAd,GAAuB,CAAlG,EAAqG;AACnG;AACA;AACD,WAJ2C,CAK5C;;;AACA,cAAI6D,MAAM,GAAG9E,GAAG,CAAC2E,QAAD,CAAH,CAAcI,KAAd,CAAoB,GAApB,CAAb;;AACA,eAAK,IAAIzE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwE,MAAM,CAAC7D,MAA3B,EAAmCX,CAAC,IAAI,CAAxC,EAA2C;AACzC,gBAAIwE,MAAM,CAACxE,CAAD,CAAN,CAAU0E,KAAV,CAAgB/B,uBAAhB,CAAJ,EAA8C,CAC5C;AACD,aAFD,MAEO,IAAI6B,MAAM,CAACxE,CAAD,CAAN,CAAU0E,KAAV,CAAgB9B,yBAAhB,CAAJ,EAAgD,CACrD;AACD,aAFM,MAEA;AACL,kBAAI+B,GAAG,GAAGH,MAAM,CAACxE,CAAD,CAAN,CAAUW,MAApB;;AACA,kBAAIyD,MAAM,CAACpB,KAAP,CAAaG,uBAAjB,EAA0C;AACxCwB,gBAAAA,GAAG,GAAGC,QAAQ,CAACD,GAAG,GAAG,GAAP,EAAY,EAAZ,CAAd,CADwC,CACT;AAChC;;AACDH,cAAAA,MAAM,CAACxE,CAAD,CAAN,GAAYoC,KAAK,CAACyC,YAAN,CAAmBF,GAAnB,CAAZ;AACD;AACF;;AACDjF,UAAAA,GAAG,CAAC2E,QAAD,CAAH,GAAgB,MAAMG,MAAM,CAACM,IAAP,CAAY,GAAZ,CAAN,GAAyB,GAAzC,CApB4C,CAoBE;AAC/C;AACF,OAzBD;AA0BD;AAED;AACJ;AACA;AACA;AACA;;AArCK,GAjC4B,EAwE5B;AACDzD,IAAAA,GAAG,EAAE,aADJ;AAED/B,IAAAA,KAAK,EAAE,SAAS4E,WAAT,CAAqBa,QAArB,EAA+B;AACpC,UAAIC,MAAM,GAAG,IAAb,CADoC,CAGpC;AACA;;;AACA,UAAIC,YAAY,GAAG7C,KAAK,CAAC8C,uBAAN,CAA8BH,QAA9B,EAAwC,KAAKhB,MAA7C,CAAnB;AACA,UAAIoB,eAAe,GAAGhG,MAAM,CAACuE,IAAP,CAAY,KAAKK,MAAjB,EAAyB,CAAzB,CAAtB;AACA,WAAKT,SAAL,GAAiB2B,YAAjB,CAPoC,CAQpC;;AACA,UAAI,KAAKlB,MAAL,CAAYkB,YAAZ,CAAJ,EAA+B;AAC7B;AACA,aAAK,IAAIjF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK8D,8BAAL,CAAoCnD,MAAxD,EAAgEX,CAAC,IAAI,CAArE,EAAwE;AACtE,iBAAO,KAAK,KAAK8D,8BAAL,CAAoC9D,CAApC,CAAL,CAAP;AACD;;AACD,YAAIoF,gBAAgB,GAAGpE,QAAQ,CAAC,EAAD,EAAK,KAAK+C,MAAL,CAAY,KAAKT,SAAjB,CAAL,CAA/B;;AACAnE,QAAAA,MAAM,CAACuE,IAAP,CAAY0B,gBAAZ,EAA8BnB,OAA9B,CAAsC,UAAU5C,GAAV,EAAe;AACnD2D,UAAAA,MAAM,CAAC3D,GAAD,CAAN,GAAc+D,gBAAgB,CAAC/D,GAAD,CAA9B;AACD,SAFD,EAN6B,CAS7B;;AACA,YAAI8D,eAAe,KAAK,KAAK7B,SAA7B,EAAwC;AACtC8B,UAAAA,gBAAgB,GAAG,KAAKrB,MAAL,CAAYoB,eAAZ,CAAnB;;AACA,eAAKE,eAAL,CAAqBD,gBAArB,EAAuC,IAAvC;AACD;AACF;AACF;AAED;AACJ;AACA;AACA;AACA;;AAhCK,GAxE4B,EA0G5B;AACD/D,IAAAA,GAAG,EAAE,iBADJ;AAED/B,IAAAA,KAAK,EAAE,SAAS+F,eAAT,CAAyBC,cAAzB,EAAyCC,OAAzC,EAAkD;AACvD,UAAIC,MAAM,GAAG,IAAb;;AAEArG,MAAAA,MAAM,CAACuE,IAAP,CAAY4B,cAAZ,EAA4BrB,OAA5B,CAAoC,UAAU5C,GAAV,EAAe;AACjD,YAAIlC,MAAM,CAACS,SAAP,CAAiB0B,cAAjB,CAAgCC,IAAhC,CAAqC+D,cAArC,EAAqDjE,GAArD,KAA6D,CAACkE,OAAO,CAAClE,GAAD,CAArE,IAA8EkE,OAAO,CAAClE,GAAD,CAAP,KAAiB,EAAnG,EAAuG;AACrGkE,UAAAA,OAAO,CAAClE,GAAD,CAAP,GAAeiE,cAAc,CAACjE,GAAD,CAA7B,CADqG,CACjE;;AACpC,cAAImE,MAAM,CAACxC,KAAP,CAAaI,WAAjB,EAA8B;AAC5BqC,YAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCrE,GAApC,GAA0C,+CAA1C,GAA4FmE,MAAM,CAAClC,SAAnG,GAA+G,eAA3H;AACD;AACF,SALD,MAKO,IAAI,OAAOiC,OAAO,CAAClE,GAAD,CAAd,KAAwB,QAA5B,EAAsC;AAC3C;AACAmE,UAAAA,MAAM,CAACH,eAAP,CAAuBC,cAAc,CAACjE,GAAD,CAArC,EAA4CkE,OAAO,CAAClE,GAAD,CAAnD;AACD;AACF,OAVD;AAWD;AAED;AACJ;AACA;AACA;;AArBK,GA1G4B,EAiI5B;AACDA,IAAAA,GAAG,EAAE,aADJ;AAED/B,IAAAA,KAAK,EAAE,SAASqG,WAAT,GAAuB;AAC5B,aAAO,KAAKrC,SAAZ;AACD;AAED;AACJ;AACA;;AARK,GAjI4B,EA2I5B;AACDjC,IAAAA,GAAG,EAAE,sBADJ;AAED/B,IAAAA,KAAK,EAAE,SAAS2D,oBAAT,GAAgC;AACrC,aAAO,KAAKI,kBAAZ;AACD;AAED;AACJ;AACA;;AARK,GA3I4B,EAqJ5B;AACDhC,IAAAA,GAAG,EAAE,uBADJ;AAED/B,IAAAA,KAAK,EAAE,SAASsG,qBAAT,GAAiC;AACtC,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAI,CAAC,KAAKC,mBAAV,EAA+B;AAC7B,aAAKA,mBAAL,GAA2B,EAA3B;AACA3G,QAAAA,MAAM,CAACuE,IAAP,CAAY,KAAKK,MAAjB,EAAyBE,OAAzB,CAAiC,UAAU5C,GAAV,EAAe;AAC9CwE,UAAAA,MAAM,CAACC,mBAAP,CAA2BpF,IAA3B,CAAgCW,GAAhC;AACD,SAFD;AAGD;;AACD,aAAO,KAAKyE,mBAAZ;AACD,KAZA,CAcD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArBC,GArJ4B,EA4K5B;AACDzE,IAAAA,GAAG,EAAE,cADJ;AAED/B,IAAAA,KAAK,EAAE,SAASyG,YAAT,CAAsBC,GAAtB,EAA2B;AAChC,UAAIC,MAAM,GAAG,IAAb;;AAEA,WAAK,IAAIC,IAAI,GAAG/E,SAAS,CAACR,MAArB,EAA6BwF,qBAAqB,GAAGtF,KAAK,CAACqF,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAvB,CAA1D,EAAqFE,IAAI,GAAG,CAAjG,EAAoGA,IAAI,GAAGF,IAA3G,EAAiHE,IAAI,EAArH,EAAyH;AACvHD,QAAAA,qBAAqB,CAACC,IAAI,GAAG,CAAR,CAArB,GAAkCjF,SAAS,CAACiF,IAAD,CAA3C;AACD;;AAED,UAAIC,KAAK,GAAGL,GAAG,IAAI,EAAnB;;AACA,UAAI,OAAOK,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,QAAAA,KAAK,GAAG,KAAKC,SAAL,CAAeN,GAAf,EAAoB,IAApB,EAA0B,IAA1B,KAAmCK,KAA3C;AACD;;AACD,UAAIE,GAAG,GAAGF,KAAK,CAAC5B,KAAN,CAAY7B,yBAAZ,EAAuC4D,MAAvC,CAA8C,UAAUC,QAAV,EAAoB;AAC1E,eAAO,CAAC,CAACA,QAAT;AACD,OAFS,EAEPC,GAFO,CAEH,UAAUD,QAAV,EAAoB;AACzB,YAAIA,QAAQ,CAAC/B,KAAT,CAAe9B,yBAAf,CAAJ,EAA+C;AAC7C,cAAI+D,UAAU,GAAGF,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAjB;;AACA,cAAIC,cAAc,GAAGZ,MAAM,CAACK,SAAP,CAAiBK,UAAjB,CAArB;;AACA,cAAIE,cAAJ,EAAoB,OAAOA,cAAP;;AACpB,cAAIZ,MAAM,CAACjD,KAAP,CAAaI,WAAjB,EAA8B;AAC5BqC,YAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCe,QAApC,GAA+C,eAA/C,GAAiET,GAAjE,GAAuE,GAAnF;AACD,WAN4C,CAO7C;;;AACA,iBAAO,aAAaW,UAAb,GAA0B,GAAjC;AACD;;AACD,eAAOF,QAAP;AACD,OAdS,EAcP3B,IAdO,CAcF,EAdE,CAAV;AAeA,aAAOyB,GAAG,CAAC9B,KAAJ,CAAU9B,uBAAV,EAAmC6D,MAAnC,CAA0C,UAAUC,QAAV,EAAoB;AACnE,eAAO,CAAC,CAACA,QAAT;AACD,OAFM,EAEJC,GAFI,CAEA,UAAUD,QAAV,EAAoB;AACzB,YAAIA,QAAQ,CAAC/B,KAAT,CAAe/B,uBAAf,CAAJ,EAA6C;AAC3C,cAAIgE,UAAU,GAAGF,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAjB;AACA,cAAIE,mBAAmB,GAAGX,qBAAqB,CAACQ,UAAD,CAA/C,CAF2C,CAG3C;;AACA,cAAIG,mBAAmB,KAAKzG,SAA5B,EAAuC;AACrC,gBAAI0G,0BAA0B,GAAGZ,qBAAqB,CAAC,CAAD,CAArB,CAAyBQ,UAAzB,CAAjC;;AACA,gBAAII,0BAA0B,KAAK1G,SAAnC,EAA8C;AAC5CyG,cAAAA,mBAAmB,GAAGC,0BAAtB;AACD,aAFD,MAEO;AACL;AACA,qBAAOD,mBAAP;AACD;AACF;;AAED,iBAAOA,mBAAP;AACD;;AACD,eAAOL,QAAP;AACD,OApBM,EAoBJ3B,IApBI,CAoBC,EApBD,CAAP;AAqBD,KAjDA,CAmDD;AACA;;AApDC,GA5K4B,EAkO5B;AACDzD,IAAAA,GAAG,EAAE,WADJ;AAED/B,IAAAA,KAAK,EAAE,SAASgH,SAAT,CAAmBjF,GAAnB,EAAwB0D,QAAxB,EAAkC;AACvC,UAAIiC,WAAW,GAAG7F,SAAS,CAACR,MAAV,GAAmB,CAAnB,IAAwBQ,SAAS,CAAC,CAAD,CAAT,KAAiBd,SAAzC,GAAqDc,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAtF;;AAEA,UAAI;AACF,YAAI8F,OAAO,GAAG,KAAKlD,MAAL,CAAYgB,QAAQ,IAAI,KAAKzB,SAA7B,CAAd;AACA,YAAI4D,KAAK,GAAG7F,GAAG,CAACoD,KAAJ,CAAU,GAAV,CAAZ;;AACA,aAAK,IAAIzE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkH,KAAK,CAACvG,MAA1B,EAAkCX,CAAC,IAAI,CAAvC,EAA0C;AACxC,cAAIiH,OAAO,CAACC,KAAK,CAAClH,CAAD,CAAN,CAAP,KAAsBK,SAA1B,EAAqC;AACnC,kBAAM8G,KAAK,CAACD,KAAK,CAAClH,CAAD,CAAN,CAAX;AACD;;AACDiH,UAAAA,OAAO,GAAGA,OAAO,CAACC,KAAK,CAAClH,CAAD,CAAN,CAAjB;AACD;;AACD,eAAOiH,OAAP;AACD,OAVD,CAUE,OAAOG,EAAP,EAAW;AACX,YAAI,CAACJ,WAAD,IAAgB,KAAKhE,KAAL,CAAWI,WAA/B,EAA4C;AAC1CqC,UAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCrE,GAApC,GAA0C,kBAA1C,GAA+D0D,QAA/D,GAA0E,eAA1E,GAA4FqC,EAAE,CAACC,OAA3G;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAED;AACJ;AACA;;AAzBK,GAlO4B,EA6P5B;AACDhG,IAAAA,GAAG,EAAE,YADJ;AAED/B,IAAAA,KAAK,EAAE,SAASgI,UAAT,GAAsB;AAC3B,aAAO,KAAKvD,MAAZ;AACD;AAJA,GA7P4B,CAAnB,CAAZ;;AAoQA,SAAOlB,gBAAP;AACD,CAzSsB,EAAvB;;AA2SAxD,OAAO,CAACmD,OAAR,GAAkBK,gBAAlB","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\r\n\r\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\r\n\r\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nvar _utils = require(\"./utils\");\r\n\r\nvar utils = _interopRequireWildcard(_utils);\r\n\r\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\n/**\r\n * Simple module to localize the React interface using the same syntax\r\n * used in the ReactNativeLocalization module\r\n * (https://github.com/stefalda/ReactNativeLocalization)\r\n *\r\n * Originally developed by Stefano Falda (stefano.falda@gmail.com)\r\n *\r\n * It uses a call to the Navigator/Browser object to get the current interface language,\r\n * then display the correct language strings or the default language (the first\r\n * one if a match is not found).\r\n *\r\n * How to use:\r\n * Check the instructions at:\r\n * https://github.com/stefalda/localized-strings\r\n */\r\n\r\nvar placeholderReplaceRegex = /(\\{[\\d|\\w]+\\})/;\r\nvar placeholderReferenceRegex = /(\\$ref\\{[\\w|.]+\\})/;\r\n\r\nvar LocalizedStrings = function () {\r\n  /**\r\n   * Constructor used to provide the strings objects in various language and the optional callback to get\r\n   * the interface language\r\n   * @param {*} props - the strings object\r\n   * @param {Function} options.customLanguageInterface - the optional method to use to get the InterfaceLanguage\r\n   * @param {Boolean} options.pseudo - convert all strings to pseudo, helpful when implementing\r\n   * @param {Boolean} options.pseudoMultipleLanguages - add 40% to pseudo, helps with translations in the future\r\n   * @param {Boolean} options.logsEnabled - Enable/Disable console.log outputs (default=true)\r\n   */\r\n  function LocalizedStrings(props, options) {\r\n    _classCallCheck(this, LocalizedStrings);\r\n\r\n    // Compatibility fix with previous version\r\n    if (typeof options === \"function\") {\r\n      /* eslint-disable no-param-reassign */\r\n      options = { customLanguageInterface: options };\r\n      /* eslint-enable */\r\n    }\r\n    this._opts = _extends({}, {\r\n      customLanguageInterface: utils.getInterfaceLanguage,\r\n      pseudo: false,\r\n      pseudoMultipleLanguages: false,\r\n      logsEnabled: true\r\n    }, options);\r\n    this._interfaceLanguage = this._opts.customLanguageInterface();\r\n    this._language = this._interfaceLanguage;\r\n    this.setContent(props);\r\n  }\r\n\r\n  /**\r\n   * Set the strings objects based on the parameter passed in the constructor\r\n   * @param {*} props\r\n   */\r\n\r\n\r\n  _createClass(LocalizedStrings, [{\r\n    key: \"setContent\",\r\n    value: function setContent(props) {\r\n      var _this = this;\r\n\r\n      var _Object$keys = Object.keys(props),\r\n          _Object$keys2 = _slicedToArray(_Object$keys, 1),\r\n          defaultLang = _Object$keys2[0];\r\n\r\n      this._defaultLanguage = defaultLang;\r\n      this._defaultLanguageFirstLevelKeys = [];\r\n      // Store locally the passed strings\r\n      this._props = props;\r\n      utils.validateTranslationKeys(Object.keys(props[this._defaultLanguage]));\r\n      // Store first level keys (for identifying missing translations)\r\n      Object.keys(this._props[this._defaultLanguage]).forEach(function (key) {\r\n        if (typeof _this._props[_this._defaultLanguage][key] === \"string\") {\r\n          _this._defaultLanguageFirstLevelKeys.push(key);\r\n        }\r\n      });\r\n      // Set language to its default value (the interface)\r\n      this.setLanguage(this._interfaceLanguage);\r\n      // Developermode with pseudo\r\n      if (this._opts.pseudo) {\r\n        this._pseudoAllValues(this._props);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Replace all strings to pseudo value\r\n     * @param {Object} obj - Loopable object\r\n     */\r\n\r\n  }, {\r\n    key: \"_pseudoAllValues\",\r\n    value: function _pseudoAllValues(obj) {\r\n      var _this2 = this;\r\n\r\n      Object.keys(obj).forEach(function (property) {\r\n        if (_typeof(obj[property]) === \"object\") {\r\n          _this2._pseudoAllValues(obj[property]);\r\n        } else if (typeof obj[property] === \"string\") {\r\n          if (obj[property].indexOf(\"[\") === 0 && obj[property].lastIndexOf(\"]\") === obj[property].length - 1) {\r\n            // already psuedo fixed\r\n            return;\r\n          }\r\n          // @TODO must be a way to get regex to find all replaceble strings except our replacement variables\r\n          var strArr = obj[property].split(\" \");\r\n          for (var i = 0; i < strArr.length; i += 1) {\r\n            if (strArr[i].match(placeholderReplaceRegex)) {\r\n              // we want to keep this string, includes specials\r\n            } else if (strArr[i].match(placeholderReferenceRegex)) {\r\n              // we want to keep this string, includes specials\r\n            } else {\r\n              var len = strArr[i].length;\r\n              if (_this2._opts.pseudoMultipleLanguages) {\r\n                len = parseInt(len * 1.4, 10); // add length with 40%\r\n              }\r\n              strArr[i] = utils.randomPseudo(len);\r\n            }\r\n          }\r\n          obj[property] = \"[\" + strArr.join(\" \") + \"]\"; // eslint-disable-line no-param-reassign\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Can be used from ouside the class to force a particular language\r\n     * indipendently from the interface one\r\n     * @param {*} language\r\n     */\r\n\r\n  }, {\r\n    key: \"setLanguage\",\r\n    value: function setLanguage(language) {\r\n      var _this3 = this;\r\n\r\n      // Check if exists a translation for the current language or if the default\r\n      // should be used\r\n      var bestLanguage = utils.getBestMatchingLanguage(language, this._props);\r\n      var defaultLanguage = Object.keys(this._props)[0];\r\n      this._language = bestLanguage;\r\n      // Associate the language object to the this object\r\n      if (this._props[bestLanguage]) {\r\n        // delete default propery values to identify missing translations\r\n        for (var i = 0; i < this._defaultLanguageFirstLevelKeys.length; i += 1) {\r\n          delete this[this._defaultLanguageFirstLevelKeys[i]];\r\n        }\r\n        var localizedStrings = _extends({}, this._props[this._language]);\r\n        Object.keys(localizedStrings).forEach(function (key) {\r\n          _this3[key] = localizedStrings[key];\r\n        });\r\n        // Now add any string missing from the translation but existing in the default language\r\n        if (defaultLanguage !== this._language) {\r\n          localizedStrings = this._props[defaultLanguage];\r\n          this._fallbackValues(localizedStrings, this);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Load fallback values for missing translations\r\n     * @param {*} defaultStrings\r\n     * @param {*} strings\r\n     */\r\n\r\n  }, {\r\n    key: \"_fallbackValues\",\r\n    value: function _fallbackValues(defaultStrings, strings) {\r\n      var _this4 = this;\r\n\r\n      Object.keys(defaultStrings).forEach(function (key) {\r\n        if (Object.prototype.hasOwnProperty.call(defaultStrings, key) && !strings[key] && strings[key] !== \"\") {\r\n          strings[key] = defaultStrings[key]; // eslint-disable-line no-param-reassign\r\n          if (_this4._opts.logsEnabled) {\r\n            console.log(\"\\uD83D\\uDEA7 \\uD83D\\uDC77 key '\" + key + \"' not found in localizedStrings for language \" + _this4._language + \" \\uD83D\\uDEA7\");\r\n          }\r\n        } else if (typeof strings[key] !== \"string\") {\r\n          // It's an object\r\n          _this4._fallbackValues(defaultStrings[key], strings[key]);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * The current language displayed (could differ from the interface language\r\n     * if it has been forced manually and a matching translation has been found)\r\n     */\r\n\r\n  }, {\r\n    key: \"getLanguage\",\r\n    value: function getLanguage() {\r\n      return this._language;\r\n    }\r\n\r\n    /**\r\n     * The current interface language (could differ from the language displayed)\r\n     */\r\n\r\n  }, {\r\n    key: \"getInterfaceLanguage\",\r\n    value: function getInterfaceLanguage() {\r\n      return this._interfaceLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return an array containing the available languages passed as props in the constructor\r\n     */\r\n\r\n  }, {\r\n    key: \"getAvailableLanguages\",\r\n    value: function getAvailableLanguages() {\r\n      var _this5 = this;\r\n\r\n      if (!this._availableLanguages) {\r\n        this._availableLanguages = [];\r\n        Object.keys(this._props).forEach(function (key) {\r\n          _this5._availableLanguages.push(key);\r\n        });\r\n      }\r\n      return this._availableLanguages;\r\n    }\r\n\r\n    // Format the passed string replacing the numbered or tokenized placeholders\r\n    // eg. 1: I'd like some {0} and {1}, or just {0}\r\n    // eg. 2: I'd like some {bread} and {butter}, or just {bread}\r\n    // eg. 3: I'd like some $ref{bread} and $ref{butter}, or just $ref{bread}\r\n    // Use example:\r\n    // eg. 1: strings.formatString(strings.question, strings.bread, strings.butter)\r\n    // eg. 2: strings.formatString(strings.question, { bread: strings.bread, butter: strings.butter })\r\n    // eg. 3: strings.formatString(strings.question)\r\n\r\n  }, {\r\n    key: \"formatString\",\r\n    value: function formatString(str) {\r\n      var _this6 = this;\r\n\r\n      for (var _len = arguments.length, valuesForPlaceholders = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n        valuesForPlaceholders[_key - 1] = arguments[_key];\r\n      }\r\n\r\n      var input = str || \"\";\r\n      if (typeof input === \"string\") {\r\n        input = this.getString(str, null, true) || input;\r\n      }\r\n      var ref = input.split(placeholderReferenceRegex).filter(function (textPart) {\r\n        return !!textPart;\r\n      }).map(function (textPart) {\r\n        if (textPart.match(placeholderReferenceRegex)) {\r\n          var matchedKey = textPart.slice(5, -1);\r\n          var referenceValue = _this6.getString(matchedKey);\r\n          if (referenceValue) return referenceValue;\r\n          if (_this6._opts.logsEnabled) {\r\n            console.log(\"No Localization ref found for '\" + textPart + \"' in string '\" + str + \"'\");\r\n          }\r\n          // lets print it another way so next replacer doesn't find it\r\n          return \"$ref(id:\" + matchedKey + \")\";\r\n        }\r\n        return textPart;\r\n      }).join(\"\");\r\n      return ref.split(placeholderReplaceRegex).filter(function (textPart) {\r\n        return !!textPart;\r\n      }).map(function (textPart) {\r\n        if (textPart.match(placeholderReplaceRegex)) {\r\n          var matchedKey = textPart.slice(1, -1);\r\n          var valueForPlaceholder = valuesForPlaceholders[matchedKey];\r\n          // If no value found, check if working with an object instead\r\n          if (valueForPlaceholder === undefined) {\r\n            var valueFromObjectPlaceholder = valuesForPlaceholders[0][matchedKey];\r\n            if (valueFromObjectPlaceholder !== undefined) {\r\n              valueForPlaceholder = valueFromObjectPlaceholder;\r\n            } else {\r\n              // If value still isn't found, then it must have been undefined/null\r\n              return valueForPlaceholder;\r\n            }\r\n          }\r\n\r\n          return valueForPlaceholder;\r\n        }\r\n        return textPart;\r\n      }).join(\"\");\r\n    }\r\n\r\n    // Return a string with the passed key in a different language or defalt if not set\r\n    // We allow deep . notation for finding strings\r\n\r\n  }, {\r\n    key: \"getString\",\r\n    value: function getString(key, language) {\r\n      var omitWarning = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n\r\n      try {\r\n        var current = this._props[language || this._language];\r\n        var paths = key.split(\".\");\r\n        for (var i = 0; i < paths.length; i += 1) {\r\n          if (current[paths[i]] === undefined) {\r\n            throw Error(paths[i]);\r\n          }\r\n          current = current[paths[i]];\r\n        }\r\n        return current;\r\n      } catch (ex) {\r\n        if (!omitWarning && this._opts.logsEnabled) {\r\n          console.log(\"No localization found for key '\" + key + \"' and language '\" + language + \"', failed on \" + ex.message);\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    /**\r\n     * The current props (locale object)\r\n     */\r\n\r\n  }, {\r\n    key: \"getContent\",\r\n    value: function getContent() {\r\n      return this._props;\r\n    }\r\n  }]);\r\n\r\n  return LocalizedStrings;\r\n}();\r\n\r\nexports.default = LocalizedStrings;"]},"metadata":{},"sourceType":"script"}